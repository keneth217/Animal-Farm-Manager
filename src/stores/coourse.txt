import { defineStore } from "pinia";
import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  getDoc,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import auth from "../firebase/index";
import router from "../router";
import Swal from "sweetalert2";
export const useCoursesStore = defineStore("course", {
  state: () => ({
    courses: [],
  }),

  getters: {
    totalCourses: (state) => {
      return state.courses.length;
    },
    filterCourses() {
      return this.courses.filter((courses) => {
        return courses.type === "software";
      });
    },
  },

  actions: {
    async addCourse(courseData) {
      console.log("Adding course:", courseData);
      const { type, image, description, title, date, subject } = courseData;

      try {
        // Check if required fields are defined
        if (!type || !image || !description || !title || !date || !subject) {
          throw new Error("All fields are required.");
        }
        const db = getFirestore();
        const storage = getStorage();
        // reference to the storage path
        const storageRef = ref(storage, `animal_images/${image.name}`);
        await uploadBytes(storageRef, image);
        const imageUrl = await getDownloadURL(storageRef);
        const courseDataWithImageUrl = {
          type,
          image: imageUrl,
          description, // Provide a default value if description is undefined
          title,
          date,
          subject,
        };
        const courseCollection = collection(db, "courses");
        const docRef = await addDoc(courseCollection, courseDataWithImageUrl);

        console.log("Document written with ID: ", docRef.id);

        // Update the state
        // this.$patch((state) => {
        //   state.courses.push(courseDataWithImageUrl);
        // });

        Swal.fire({
          icon: "success",
          title: "Course Added Successfully!",
          showConfirmButton: false,
          timer: 1500,
        });

        // Redirect to the '/animals' route
        router.push("/");
      } catch (error) {
        console.error("Error adding document: ", error);

        Swal.fire({
          icon: "error",
          title: "Course Addition Error",
          text: error.message,
        });
      }
    },
    async fetchAllCourses() {
      try {
        const db = getFirestore();
        const coursesCollection = collection(db, "courses");
        const querySnapshot = await getDocs(coursesCollection);

        const courses = [];
        querySnapshot.forEach((doc) => {
          courses.push({ id: doc.id, ...doc.data() });
        });

        // Sort courses type
        const typeSorted = courses.sort((a, b) => {
          const typeOrder = {
            software: 1,
            "information tech": 2,
            cybersecurity: 3,
          };
          return typeOrder[a.type] - typeOrder[b.type];
        });

        // Directly update the state
        this.courses = typeSorted;
      } catch (error) {
        console.error("Error fetching courses: ", error);
        throw error;
      }
    },
    async fetchSingleCourse(courseId) {
      try {
        const db = getFirestore();
        const courseRef = doc(db, "courses", courseId);
        const docSnapshot = await getDoc(courseRef);

        if (docSnapshot.exists()) {
          // Create a new object to avoid shared references
          this.singleCourse = { ...docSnapshot.data() };
          this.singleCourse.id = docSnapshot.id;
        } else {
          console.warn(`Course with ID ${courseId} does not exist.`);
          this.singleCourse = null;
        }
      } catch (error) {
        console.error("Error fetching single course: ", error.message);
        // Handle the error as needed
        // throw error; // Optionally rethrow the error
      }
    },
    async updateCourse({ courseId, updatedDetails }) {
      try {
        const { type, description, title, date, subject, image } =
          updatedDetails;
        let imageUrl;

        // Provide confirmation to the user before updating
        const userConfirmed = await Swal.fire({
          title: "Update Course",
          text: "Are you sure you want to update this course?",
          icon: "question",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, update it!",
        });

        if (!userConfirmed.isConfirmed) {
          return;
        }

        const db = getFirestore();
        const courseRef = doc(db, "courses", courseId);

        if (image instanceof File) {
          const storage = getStorage();
          const storageRef = ref(
            storage,
            `animal_images/${courseId}_${image.name}`
          );
          await uploadBytes(storageRef, image);
          imageUrl = await getDownloadURL(storageRef);
        }

        await updateDoc(courseRef, {
          type,
          description,
          subject,
          date,
          title,
          ...(imageUrl && { image: imageUrl }), // Only include image if it exists
        });

        // Assuming `courses` is a ref or reactive object in your store
        const index = this.courses.findIndex(
          (course) => course.id === courseId
        );
        if (index !== -1) {
          // Update the specific course properties in the array
          const courseToUpdate = this.courses[index];
          courseToUpdate.type = type;
          courseToUpdate.description = description;
          courseToUpdate.subject = subject;
          courseToUpdate.date = date;
          courseToUpdate.title = title;
          courseToUpdate.image = imageUrl || courseToUpdate.image;
        }

        // Show success message
        await Swal.fire({
          icon: "success",
          title: "Course updated successfully!",
          showConfirmButton: false,
          timer: 1500,
        });

        // Navigate to the desired route
        router.push("/");
      } catch (error) {
        // Handle errors
        Swal.fire({
          icon: "error",
          title: "Error Updating",
          text: error.message || "An error occurred while updating the course.",
        });

        console.error("Error updating course details: ", error);
        throw error;
      }
    },
    async deleteCourse(courseId) {
      try {
        // Assuming you are using Firestore
        const db = getFirestore();
        const courseRef = doc(db, "courses", courseId);

        // Delete the course from Firestore
        await deleteDoc(courseRef);

        // Update the local state (assuming courses is a ref or reactive object)
        // Assuming courses is an array of objects and this.courses is reactive
        const updatedCourses = this.courses.filter(
          (course) => course.id !== courseId
        );

        // Update the local state with the new array
        this.courses = updatedCourses;

        console.log("Course deleted successfully!");
        router.push("/");
      } catch (error) {
        console.error("Error deleting course: ", error);
        throw error;
      }
    },
  },
});
